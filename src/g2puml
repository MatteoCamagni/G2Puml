#Imports
import re
import yaml
import plantuml
import requests
from typing import List
from pathlib import Path
from gherkin.parser import Parser
from elop_tools import ElopConf
from abc import abstractmethod


RENDER_URL = 'http://www.plantuml.com/plantuml/img/'

class TaskHandler():
    def __init__(self):
        self.prev_task = None
        self.order = 0
        self.start = 0
        self.cursor = 0
    
    def update_cursor(self) -> None:
        self.cursor += 1

    def update_task(self, new_tsk: str, new_order: int) -> None:
        self.prev_task = new_tsk
        self.order = new_order

class Model():

    skeleton = \
    """@startuml
    !theme plain

    header
        {header}
    end header

    legend top
        {legend}
    end legend

    'Entities

    box "Runners"
    {runners}
    end box

    box "Targets"
    {targets}
    end box

    box "Resources"
    {resources}
    end box

    'Sequence actions
    == Start Time ==

    {core}

    == End Time ==
    @enduml
    """

    def __init__(self,
                 elenv: ElopConf,
                 steps: List[dict],
                 img_name: str,
                 ) -> None:
        self._env = elenv
        self._steps = steps
        self._runners = None
        self._targets = None
        self._resources = None
        self._img_name = img_name.lower().replace(' ','_') + '.png'

    @abstractmethod
    def _get_puml_runners(self):
        pass

    @abstractmethod
    def _get_puml_targets(self):
        pass

    @abstractmethod
    def _get_puml_resources(self):
        pass

    @abstractmethod
    def _get_puml_header(self):
        pass

    @abstractmethod
    def _get_puml_legend(self):
        pass

    @abstractmethod
    def _get_core(self):
        pass

    def _get_plant_uml(self) -> str:
        return self.skeleton.format(
            header = self._get_puml_header(),
            legend = self._get_puml_legend(),
            runners = self._get_puml_runners(),
            targets = self._get_puml_targets(),
            resources = self._get_puml_resources(),
            core = self._get_puml_core(),
        )
    
    def export_puml(self) -> None:
        puml = plantuml.PlantUML(url=RENDER_URL)
        a = self._get_plant_uml()
        img_url = puml.get_url(a)
        img_data = requests.get(img_url).content
        with open(self._img_name, 'wb') as handler:
            handler.write(img_data)
        with open("raw.puml", 'w') as handler:
            handler.write(a)

class AD_Model(Model):

    header = \
    """
    \t|<b>Color| <#cyan> | <#gold> |
    \t|<b>Description| SWIFC Get | SWIFC Set |
    """

    get_sk = \
    """
    {tab}{swc1} --> {swc2} ++ #cyan: Get Request
    {tab}{sgn} o-> {swc2}:  Signal retrieved
    {tab}return Get Response
    """
    set_sk = \
    """
    {tab}{swc1} --> {swc2} ++ #gold: Set Request
    {tab}{swc2} ->o {sgn} --: Set Signal
    """

    routine_sk = \
    """autonumber resume
    {q} --> {swc}: Call the SWC routine
    autonumber stop
    """

    open_task = \
        """
autonumber {label}
    [x-> {q}: {task} Start
autonumber stop\n\n"""
    

    act_sk = "activate {x}\n"
    deact_sk = "deactivate {x}\n"

    queue_sk = '\tqueue "{runner}" as {n}\n'
    participant_sk = '\tparticipant "{swc}" as {n}\n'
    entity_sk = '\tentity "{sgn}" as {n}\n'

    def __init__(self,
                 *args,
                 **kwargs
                 ) -> None:
        super().__init__(*args,**kwargs)
        self.__set_core_attrs()
        self.__act_items = []
        self.__act_tabs = 0

    def __get_alias(self, label: str):
        return label.lower().replace(' ','_')

    def __set_core_attrs(self):
        self._runners = []
        self._targets = {'active':[],'passive':[]}
        self._resources = []

        for x in self._steps:
            runx = x.get('runner')

            if runx:
                if runx not in self._runners:
                    self._runners.append(runx)

            swc = x.get('swc')
            if swc:
                if swc not in self._targets['active']:
                    self._targets['active'].append(swc)

            sgn = x.get('sgn')
            if sgn:
                if sgn not in self._resources:
                    self._resources.append(sgn)
                
                swc = self._env.get_swc_from_sgn(sgn)
                if swc not in self._targets['active'] and \
                    swc not in self._targets['passive']:
                    self._targets['passive'].append(swc)

    def _get_puml_runners(self) -> str:
        res = ''
        for v in self._runners:
            res += self.queue_sk.format(runner=v,n=self.__get_alias(v))

        return res

    def _get_puml_targets(self):
        res = ''
        for t in self._targets.values():
            for v in t:
                res += self.participant_sk.format(swc=v,n=self.__get_alias(v))

        return res

    def _get_puml_resources(self):
        res = ''
        for v in self._resources:
            res += self.entity_sk.format(sgn=v,n=self.__get_alias(v))

        return res

    def _get_puml_new_task(self, label: str, task: str, runner: str) -> str:
        return self._get_puml_deactivate_all() + \
            self.open_task.format(q= runner, label = label, task = task) + \
            self._get_puml_activation(runner)
            
    
    def _get_puml_activation(self,item: str, runner: str = None) -> str:
        item = self.__get_alias(item)
        self.__act_tabs += 1
        self.__act_items.insert(0,item)
        res = ''
        if runner:
            res += "\t"*self.__act_tabs + self.routine_sk.format(q=runner, swc=item)
        res += "\t"*self.__act_tabs + self.act_sk.format(x= item)
        return res

    def _get_puml_deactivation(self,item: str) -> str:
        item = self.__get_alias(item)
        try:
            self.__act_items.remove(item)
            res = "\t"*self.__act_tabs + self.deact_sk.format(x=item)
            self.__act_tabs -= 1
        except:
            res = ""
        
        return res

    def _get_puml_deactivate_all(self) -> str:
        res = ""
        for item in self.__act_items:
            item = self.__get_alias(item)
            res += "\t"*self.__act_tabs + self.deact_sk.format(x=item) + "\n"
            self.__act_tabs -= 1

        self.__act_items = []
        self.__act_tabs = 0
        return res
    
    def _get_puml_read_sgn(self, swc1: str, swc2: str, sgn: str) -> str:
        swc1 = self.__get_alias(swc1)
        swc2 = self.__get_alias(swc2)
        sgn = self.__get_alias(sgn)
        return self.get_sk.format(tab="\t"*(self.__act_tabs+1), swc1=swc1, swc2=swc2, sgn=sgn)
    
    def _get_puml_write_sgn(self, swc1: str, swc2: str, sgn: str) -> str:
        swc1 = self.__get_alias(swc1)
        swc2 = self.__get_alias(swc2)
        sgn = self.__get_alias(sgn)
        return self.set_sk.format(tab="\t"*(self.__act_tabs+1), swc1=swc1, swc2=swc2, sgn=sgn)
        
    def _get_core(self):
        _core = []
        runner = self.__get_alias(self._runners[0])
        ssm_state = None
        _th = TaskHandler()
        _last_swc = None
        _is_new_task = False
        _is_new_swc = False
        timer = None


        for x in self._steps:
            match x['kw']:
                case 'g1':
                    ssm_state = x.get('ssm')
                case 'w1':
                    swc = x.get('swc')
                    sgn = x.get('sgn')
                    #Update task
                    c_name, c_order = self._env.get_task(ssm_state, swc)
                    #Check if the current task is a new one
                    _is_new_task = c_name != _th.prev_task
                    _is_new_swc = swc != _last_swc

                    if _is_new_task or _th.order > c_order:
                        _th.update_cursor()

                    _th.start, _th.cursor = \
                        self._env.get_task_scheduling(c_name, _th.start, _th.cursor)

                    if _is_new_task:
                        _th.update_task(c_name, c_order)
                        timer = "resume" if timer else '"<b>[T0]"'
                        _core.append(self._get_puml_deactivate_all())                
                        _core.append(self._get_puml_new_task(timer,c_name,runner))

                    if _is_new_swc:
                        if _last_swc:
                            _core.append(self._get_puml_deactivation(_last_swc))
                        _core.append(self._get_puml_activation(swc,runner))
                        _last_swc = swc

                    swc_sgn = self._env.get_swc_from_sgn(sgn)
                    _core.append(self._get_puml_read_sgn(swc,swc_sgn,sgn))    
                case 't1':
                    sgn = x.get('sgn')
                    swc_sgn = self._env.get_swc_from_sgn(sgn)
                    _core.append(self._get_puml_write_sgn(_last_swc,swc_sgn,sgn))

        _core.append(self._get_puml_deactivate_all())

        return "\n".join(_core)

    def _get_puml_header(self):
        return self.header

    def _get_puml_legend(self):
        return ''

    def _get_puml_core(self):
        return self._get_core()

def get_existing_path(path: str) -> Path:
    p = Path(path)
    assert p.exists(), 'Error: %s does not exists!' % path
    return p

def get_map(path: str) -> dict:
    p = get_existing_path(path)
    p = yaml.safe_load(p.open('r'))

    #Compile rules
    for k, v in p['g2p'].items():
        t_v = None
        for lbl, rule in v.items():
            t_v = re.compile(rule)
            p['g2p'][k][lbl] = t_v
    
    return p

def get_parsed_step(step: str, rules: dict) -> dict:
    '''Get the standard dictionary representation from a step text'''
    for k,r in rules.items():
        g = r.match(step)
        if g:
            break
    assert g, "Wrong step text syntax:\n\t%s\n\tCorrect syntax rule:\n\t%s" % (step, rules)
    d = dict(g.groupdict())
    d.update({'kw': k})
    return d

def get_collected_steps(scenario: dict, map: dict) -> List[dict]:
    last_keyword: str = None
    res: List[dict] = []

    for step in scenario['steps']:
        last_keyword =  last_keyword if step['keywordType'] == 'Conjunction' else \
            step['keyword'].replace(' ','')
        d = get_parsed_step(step['text'],map[last_keyword])
        res.append(d)

    return res

def main():
    root = Path(__file__).parents[1] 

    gd = Parser().parse("C:/Users/CMM2OFO/Documents/Repos/G2Puml/test_files/demo.feature")
    map = get_map('C:/Users/CMM2OFO/Documents/Repos/G2Puml/src/maps/ad_data_flow.yaml')

    out_f = gd['feature']['children'][0]['scenario']['name']

    elenv = ElopConf(icd_parh=root / "test_files" / 'icd.csv',
                     sch_path='C:/Users/CMM2OFO/Documents/Repos/G2Puml/Strategy2.yaml',
                     ssm_conf_path=root / "test_files" / 'ssm_conf.yaml',
                    )
    steps = get_collected_steps(gd['feature']['children'][0]['scenario'], map['g2p'])

    ad_model = AD_Model(elenv,steps,out_f)
    ad_model.export_puml()

if __name__ == '__main__':
    main()